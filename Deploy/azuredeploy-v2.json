{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "UniqueId": {
      "defaultValue": "[take(uniqueString(resourceGroup().id),5)]",
      "type": "string",
      "metadata": {
        "description": "Unique ID.  E.g. your name.  Must be Alphanumeric (a~z, 0~9), and 5~12 characters"
      },
      "minLength": 3,
      "maxLength": 10
    },
    "useFreeSKU": {
      "defaultValue": true,
      "type": "bool",
      "metadata": {
        "description": "True to set up development environment with free SKUs.  Note: quotas and limintations apply."
      }
    },
    "addADT": {
      "defaultValue": false,
      "type": "bool",
      "metadata": {
        "description": "True to set up development environment with free SKUs.  Note: quotas and limintations apply."
      }
    },
    "iothub_name": {
      "type": "string",
      "defaultValue": "PQT-IoTHub"
    },
    "eventhubs_name": {
      "type": "string",
      "defaultValue": "PQT-EventHubs"
    },
    "signalr_name": {
      "type": "string",
      "defaultValue": "PQT-SignalR"
    },
    "storage_name": {
      "type": "string",
      "defaultValue": "p15stor"
    },
    "appsvc_name": {
      "type": "string",
      "defaultValue": "PQT-OpenPlatform"
    },
    "map_name": {
      "type": "string",
      "defaultValue": "PQT-Map"
    },
    "git_webapp_repo": {
      "type": "string",
      "defaultValue": "https://github.com/microsoft/project15-openplatform-webapp.git"
    },
    "git_webapp_branch": {
      "type": "string",
      "defaultValue": "master"
    },
    "git_functionsapp_repo": {
      "type": "string",
      "defaultValue": "https://github.com/microsoft/project15-openplatform-functions.git"
    },
    "git_functionsapp_branch": {
      "type": "string",
      "defaultValue": "master"
    },
    "utcDate": {
      "type": "string",
      "defaultValue": "[utcNow('D')]"
    }
  },
  "variables": {
    "envTag": "v2.1",
    "gitRepo": {
      "webApp": "[parameters('git_webapp_repo')]",
      "webAppBranch": "[parameters('git_webapp_branch')]",
      "functions": "[parameters('git_functionsapp_repo')]",
      "functionsBranch": "[parameters('git_functionsapp_branch')]"
    },
    "location": "[resourceGroup().location]",
    "deployment": {
      "apiVersion": "2021-04-01"
    },
    "iotHub": {
      "name": "[concat(parameters('iothub_name'), '-', parameters('UniqueID'))]",
      "apiVersion": "2022-04-30-preview",
      "eventHubsCG": "[concat(parameters('iothub_name'), '-', parameters('UniqueID'), '/events/eventHubsCG')]",
      "systemTopic": "IoTHubSystemTopic",
      "sku": "[if(parameters('useFreeSKU'), 'F1', 'S1')]"
    },
    "iotHubSku": {
      "F1": {
        "skuName": "F1",
        "partitionCount": 2
      },
      "S1": {
        "skuName": "S1",
        "partitionCount": 4
      }
    },
    "eventHubs": {
      "nameSpace": "[concat(parameters('eventhubs_name'), '-', parameters('UniqueID'))]",
      "apiVersion": "2021-01-01-preview",
      "name": "devicetelemetryhub",
      "ruleListen": "TelemetryListenRule",
      "ruleSend": "TelemetrySendRule",
      "sku": "[if(parameters('useFreeSKU'), 'Basic', 'Standard')]",
      "cgFunction": "telemetry-functions-cg"
    },
    "eventHubsSku": {
      "Basic": {
        "skuName": "Basic",
        "tier": "Basic",
        "cgFunction": "$Default"
      },
      "Standard": {
        "skuName": "Standard",
        "tier": "Standard",
        "cgFunction": "[variables('eventHubs').cgFunction]"
      }
    },
    "signalR": {
      "name": "[concat(parameters('signalr_name'), '-', parameters('UniqueID'))]",
      "apiVersion": "2022-08-01-preview",
      "sku": "[if(parameters('useFreeSKU'), 'Free_F1', 'Standard_S1')]"
    },
    "signalRSku": {
      "Free_F1": {
        "skuName": "Free_F1",
        "tier": "Free"
      },
      "Standard_S1": {
        "skuName": "Standard_S1",
        "tier": "Standard"
      }
    },
    "appSvc": {
      "apiVersion": "2022-03-01",
      "hostingPlan": "[concat(parameters('appsvc_name'), '-AppHost-', parameters('UniqueID'))]",
      "functionsName": "[concat(parameters('appsvc_name'), '-Functions-', parameters('UniqueID'))]",
      "webappName": "[concat(parameters('appsvc_name'), '-Portal-', parameters('UniqueID'))]",
      "webappUrl": "[toLower(concat('https://', parameters('appsvc_name'), '-Portal-', parameters('UniqueID'), '.azurewebsites.net'))]",
      "sku": "[if(parameters('useFreeSKU'), 'B1', 'S1')]"
    },
    "appSvcSku": {
      "B1": {
        "skuName": "B1"
      },
      "S1": {
        "skuName": "S1"
      }
    },
    "storage": {
      "name": "[concat(parameters('storage_name'), toLower(parameters('UniqueID')))]",
      "apiVersion": "2022-05-01",
      "sku": "Standard_LRS"
    },
    "storageSku": {
      "Standard_LRS": {
        "skuName": "Standard_LRS",
        "kind": "StorageV2"
      }
    },
    "map": {
      "name": "[concat(parameters('map_name'), '-', parameters('UniqueID'))]",
      "apiVersion": "2021-12-01-preview"
    },
    "eventGrid": {
      "apiVersion": "2022-06-15"
    },
    "adt": {
      "name": "[concat(resourceGroup().name, '-ADT-', parameters('UniqueID'))]",
      "apiVersion": "2022-10-31",
      "identity": "functionsidentity",
      "roleId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'bcd981a7-7f74-457b-83e1-cceb9e632ffe')]"
    },
    "adtAuthorization": {
      "apiVersion": "2020-04-01-preview",
      "adtRoleName": "[guid(variables('adt').identity, variables('adt').roleId)]"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/tags",
      "name": "default",
      "apiVersion": "2021-04-01",
      "properties": {
        "tags": {
          "createdDate": "[parameters('utcDate')]"
        }
      }
    },
    {
      "name": "Deploy-IoT",
      "type": "Microsoft.Resources/deployments",
      "resourceGroup": "[resourceGroup().name]",
      "apiVersion": "[variables('deployment').apiVersion]",
      "dependsOn": [],
      "properties": {
        "mode": "Incremental",
        "expressionEvaluationOptions": {
          "scope": "outer"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[variables('eventHubs').nameSpace]",
              "type": "Microsoft.EventHub/namespaces",
              "apiVersion": "[variables('eventhubs').apiVersion]",
              "location": "[variables('location')]",
              "tags": {
                "ENV": "[variables('envTag')]"
              },
              "sku": {
                "name": "[variables('eventHubsSku')[variables('eventHubs').sku].skuName]",
                "tier": "[variables('eventHubsSku')[variables('eventHubs').sku].tier]",
                "capacity": 1
              },
              "properties": {},
              "resources": []
            },
            {
              "name": "[variables('iotHub').name]",
              "type": "Microsoft.Devices/IotHubs",
              "apiVersion": "[variables('iothub').apiVersion]",
              "location": "[variables('location')]",
              "tags": {
                "ENV": "[variables('envTag')]"
              },
              "sku": {
                "name": "[variables('iotHubSku')[variables('iotHub').sku].skuName]",
                "capacity": 1
              }
            }
          ]
        }
      }
    },
    {
      "name": "[variables('signalR').name]",
      "type": "Microsoft.SignalRService/SignalR",
      "apiVersion": "[variables('signalr').apiVersion]",
      "location": "[variables('location')]",
      "tags": {
        "ENV": "[variables('envTag')]"
      },
      "sku": {
        "name": "[variables('signalRSku')[variables('signalR').sku].skuName]",
        "tier": "[variables('signalRSku')[variables('signalR').sku].tier]",
        "capacity": 1
      },
      "kind": "SignalR",
      "properties": {
        "features": [
          {
            "flag": "ServiceMode",
            "value": "Classic",
            "properties": {}
          }
        ],
        "cors": {
          "allowedOrigins": [
            "[variables('appSvc').webappUrl]",
            "https://localhost:44354"
          ]
        }
      }
    },
    {
      "name": "[variables('eventHubs').nameSpace]",
      "type": "Microsoft.EventHub/namespaces",
      "apiVersion": "[variables('eventhubs').apiVersion]",
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'Deploy-IoT')]"
      ],
      "location": "[variables('location')]",
      "tags": {
        "ENV": "[variables('envTag')]"
      },
      "properties": {},
      "resources": [
        {
          "name": "[concat(variables('eventHubs').nameSpace, '/RootManageSharedAccessKey')]",
          "type": "Microsoft.EventHub/namespaces/AuthorizationRules",
          "apiVersion": "[variables('eventhubs').apiVersion]",
          "dependsOn": [
            "[resourceId('Microsoft.EventHub/namespaces', variables('eventHubs').nameSpace)]"
          ],
          "properties": {
            "rights": [
              "Send",
              "Listen",
              "Manage"
            ]
          }
        },
        {
          "name": "[concat(variables('eventHubs').nameSpace, '/GlobalSendOnlyRule')]",
          "type": "Microsoft.EventHub/namespaces/AuthorizationRules",
          "apiVersion": "[variables('eventhubs').apiVersion]",
          "dependsOn": [
            "[resourceId('Microsoft.EventHub/namespaces', variables('eventHubs').nameSpace)]"
          ],
          "properties": {
            "rights": [
              "Send"
            ]
          }
        },
        {
          "name": "[variables('eventHubs').name]",
          "type": "eventhubs",
          "apiVersion": "[variables('eventhubs').apiVersion]",
          "location": "[variables('location')]",
          "dependsOn": [
            "[resourceId('Microsoft.EventHub/namespaces', variables('eventHubs').nameSpace)]"
          ],
          "properties": {
            "messageRetentionInDays": 1,
            "partitionCount": 1
          },
          "resources": [
            {
              "name": "[variables('eventHubs').ruleListen]",
              "type": "authorizationRules",
              "apiVersion": "[variables('eventhubs').apiVersion]",
              "dependsOn": [
                "[variables('eventHubs').name]"
              ],
              "properties": {
                "rights": [
                  "Listen"
                ]
              }
            },
            {
              "name": "[variables('eventHubs').ruleSend]",
              "type": "authorizationRules",
              "apiVersion": "[variables('eventhubs').apiVersion]",
              "dependsOn": [
                "[variables('eventHubs').name]",
                "[resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules', variables('eventhubs').nameSpace, variables('eventhubs').name, variables('eventhubs').ruleListen)]"
              ],
              "properties": {
                "rights": [
                  "Send"
                ]
              }
            },
            {
              "condition": "[equals(variables('eventhubs').sku, 'Standard')]",
              "name": "[variables('eventHubs').cgFunction]",
              "type": "consumergroups",
              "apiVersion": "[variables('eventhubs').apiVersion]",
              "dependsOn": [
                "[variables('eventHubs').name]"
              ],
              "properties": {}
            }
          ]
        }
      ]
    },
    {
      "name": "[variables('iotHub').name]",
      "type": "Microsoft.Devices/IotHubs",
      "apiVersion": "[variables('iothub').apiVersion]",
      "location": "[variables('location')]",
      "tags": {
        "ENV": "[variables('envTag')]"
      },
      "sku": {
        "name": "[variables('iotHubSku')[variables('iotHub').sku].skuName]",
        "capacity": 1
      },
      "identity": {
        "type": "None"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'Deploy-IoT')]",
        "[resourceId('Microsoft.EventHub/namespaces', variables('eventHubs').nameSpace)]",
        "[resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules', variables('eventHubs').nameSpace, variables('eventHubs').name, variables('eventHubs').ruleSend)]"
      ],
      "properties": {
        "ipFilterRules": [],
        "eventHubEndpoints": {
          "events": {
            "retentionTimeInDays": 1,
            "partitionCount": "[variables('iotHubSku')[variables('iotHub').sku].partitionCount]"
          }
        },
        "routing": {
          "endpoints": {
            "serviceBusQueues": [],
            "serviceBusTopics": [],
            "eventHubs": [
              {
                "connectionString": "[listKeys(resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules', variables('eventHubs').nameSpace,variables('eventHubs').name, variables('eventHubs').ruleSend),variables('eventHubs').apiVersion).primaryConnectionString]",
                "name": "DeviceTelemetryToEventHub-EP"
              }
            ],
            "storageContainers": []
          },
          "routes": [
            {
              "name": "DeviceLifecycleRoute",
              "source": "DeviceLifecycleEvents",
              "condition": "true",
              "endpointNames": [
                "DeviceTelemetryToEventHub-EP"
              ],
              "isEnabled": true
            },
            {
              "name": "DeviceTwinChangeRoute",
              "source": "TwinChangeEvents",
              "condition": "true",
              "endpointNames": [
                "DeviceTelemetryToEventHub-EP"
              ],
              "isEnabled": true
            },
            {
              "name": "DigitalTwinChangeRoute",
              "source": "DigitalTwinChangeEvents",
              "condition": "true",
              "endpointNames": [
                "DeviceTelemetryToEventHub-EP"
              ],
              "isEnabled": true
            },
            {
              "name": "DeviceTelemetryRoute",
              "source": "DeviceMessages",
              "condition": "true",
              "endpointNames": [
                "DeviceTelemetryToEventHub-EP"
              ],
              "isEnabled": true
            },
            {
              "name": "DeviceTelemetryRouteToDefault",
              "source": "DeviceMessages",
              "condition": "true",
              "endpointNames": [
                "events"
              ],
              "isEnabled": true
            }
          ],
          "fallbackRoute": {
            "name": "$fallback",
            "source": "DeviceMessages",
            "condition": "true",
            "endpointNames": [
              "events"
            ],
            "isEnabled": true
          }
        },
        "messagingEndpoints": {
          "fileNotifications": {
            "lockDurationAsIso8601": "PT1M",
            "ttlAsIso8601": "PT1H",
            "maxDeliveryCount": 10
          }
        },
        "enableFileUploadNotifications": false,
        "cloudToDevice": {
          "maxDeliveryCount": 10,
          "defaultTtlAsIso8601": "PT1H",
          "feedback": {
            "lockDurationAsIso8601": "PT1M",
            "ttlAsIso8601": "PT1H",
            "maxDeliveryCount": 10
          }
        },
        "features": "None"
      },
      "resources": []
    },
    {
      "name": "[variables('iotHub').systemTopic]",
      "type": "Microsoft.EventGrid/systemTopics",
      "apiVersion": "2022-06-15",
      "location": "[variables('location')]",
      "tags": {
        "ENV": "[variables('envTag')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'Deploy-IoT')]",
        "[resourceId('Microsoft.Resources/deployments', 'Deploy-Functions')]"
      ],
      "properties": {
        "source": "[resourceId('Microsoft.Devices/IotHubs', variables('iotHub').name)]",
        "topicType": "Microsoft.Devices.IoTHubs"
      }
    },
    {
      "name": "[concat(variables('iotHub').systemTopic, '/DeviceManagementEventSubscription')]",
      "type": "Microsoft.EventGrid/systemTopics/eventSubscriptions",
      "apiVersion": "[variables('eventGrid').apiVersion]",
      "dependsOn": [
        "[resourceId('Microsoft.EventGrid/systemTopics', variables('iotHub').systemTopic)]",
        "[resourceId('Microsoft.Resources/deployments', 'Deploy-Functions')]",
        "[resourceId('Microsoft.Web/sites', variables('appSvc').functionsName)]",
        "[resourceId('Microsoft.Web/sites/config', variables('appSvc').webappName, 'appsettings')]"
      ],
      "properties": {
        "destination": {
          "properties": {
            "resourceId": "[resourceId('Microsoft.Web/sites/functions', variables('appSvc').functionsName, 'EventGrid_Processor')]",
            "maxEventsPerBatch": 1,
            "preferredBatchSizeInKilobytes": 64
          },
          "endpointType": "AzureFunction"
        },
        "filter": {
          "includedEventTypes": [
            "Microsoft.Devices.DeviceCreated",
            "Microsoft.Devices.DeviceDeleted",
            "Microsoft.Devices.DeviceConnected",
            "Microsoft.Devices.DeviceDisconnected"
          ]
        },
        "labels": [],
        "eventDeliverySchema": "EventGridSchema",
        "retryPolicy": {
          "maxDeliveryAttempts": 30,
          "eventTimeToLiveInMinutes": 1440
        }
      }
    },
    {
      "name": "[variables('storage').name]",
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "[variables('storage').apiVersion]",
      "location": "[variables('location')]",
      "tags": {
        "ENV": "[variables('envTag')]"
      },
      "sku": {
        "name": "[variables('storageSku')[variables('storage').sku].skuName]"
      },
      "kind": "[variables('storageSku')[variables('storage').sku].kind]"
    },
    {
      "name": "[variables('appSvc').hostingPlan]",
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "[variables('appSvc').apiVersion]",
      "location": "[variables('location')]",
      "tags": {
        "ENV": "[variables('envTag')]"
      },
      "sku": {
        "name": "[variables('appSvcSku')[variables('appSvc').sku].skuName]"
      },
      "kind": "app",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storage').name)]"
      ],
      "properties": {
        "workerSize": 0,
        "numberOfWorkers": 1
      }
    },
    {
      "name": "Deploy-Functions",
      "type": "Microsoft.Resources/deployments",
      "resourceGroup": "[resourceGroup().name]",
      "apiVersion": "[variables('deployment').apiVersion]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storage').name)]",
        "[resourceId('Microsoft.Web/serverfarms', variables('appSvc').hostingPlan)]"
      ],
      "properties": {
        "mode": "Incremental",
        "expressionEvaluationOptions": {
          "scope": "outer"
        },
        "parameters": {},
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[variables('appSvc').functionsName]",
              "type": "Microsoft.Web/sites",
              "apiVersion": "[variables('appSvc').apiVersion]",
              "kind": "functionapp",
              "location": "[variables('location')]",
              "tags": {
                "ENV": "[variables('envTag')]"
              },
              "dependsOn": [],
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "name": "[variables('appSvc').functionsName]",
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appSvc').hostingPlan)]",
                "clientAffinityEnabled": false,
                "enabled": true,
                "siteConfig": {
                  "alwaysOn": false,
                  "cors": {
                    "allowedOrigins": [
                      "*"
                    ]
                  },
                  "appSettings": [
                    {
                      "name": "FUNCTIONS_EXTENSION_VERSION",
                      "value": "~4"
                    },
                    {
                      "name": "AzureWebJobsSecretStorageType",
                      "value": "Files"
                    }
                  ]
                }
              },
              "resources": [
                {
                  "name": "web",
                  "type": "sourcecontrols",
                  "apiVersion": "[variables('appSvc').apiVersion]",
                  "dependsOn": [
                    "[resourceId('Microsoft.Web/Sites', variables('appSvc').functionsName)]"
                  ],
                  "properties": {
                    "repoUrl": "[variables('gitRepo').functions]",
                    "branch": "[variables('gitRepo').functionsBranch]",
                    "IsManualIntegration": true
                  }
                }
              ]
            }
          ]
        }
      }
    },
    {
      "name": "[concat(variables('appSvc').functionsName, '/appsettings')]",
      "type": "Microsoft.Web/sites/config",
      "apiVersion": "[variables('appSvc').apiVersion]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storage').name)]",
        "[resourceId('Microsoft.Web/serverfarms', variables('appSvc').hostingPlan)]",
        "[resourceId('Microsoft.EventHub/namespaces', variables('eventHubs').nameSpace)]",
        "[resourceId('Microsoft.EventHub/Namespaces/EventHubs/AuthorizationRules', variables('eventHubs').nameSpace, variables('eventHubs').name, variables('eventHubs').ruleListen)]",
        "[resourceId('Microsoft.SignalRService/SignalR', variables('signalR').name)]",
        "[resourceId('Microsoft.DigitalTwins/digitalTwinsInstances', variables('adt').name)]",
        "[resourceId('Microsoft.Maps/accounts', variables('map').name)]",
        "[resourceId('Microsoft.Resources/deployments', 'Deploy-IoT')]",
        "[resourceId('Microsoft.Resources/deployments', 'Deploy-Functions')]"
      ],
      "properties": {
        "FUNCTIONS_EXTENSION_VERSION": "~4",
        "AzureWebJobsSecretStorageType": "Files",
        "AzureWebJobsStorage": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storage').name,';AccountKey=',listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('storage').name), variables('storage').apiVersion).keys[0].value)]",
        "AzureWebJobsDashboard": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storage').name,';AccountKey=',listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('storage').name), variables('storage').apiVersion).keys[0].value)]",
        "EventHubConnectionString": "[listKeys(resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules', variables('eventHubs').nameSpace, variables('eventHubs').name, variables('eventHubs').ruleListen),variables('eventhubs').apiVersion).primaryConnectionString]",
        "AzureSignalRConnectionString": "[concat('Endpoint=https://', toLower(variables('signalr').name), '.service.signalr.net;AccessKey=', listKeys(resourceId('Microsoft.SignalRService/signalR', toLower(variables('signalr').name)), variables('signalr').apiVersion).primaryKey, ';Version=1.0;')]",
        "TELEMETRY_CG": "[variables('eventHubsSku')[variables('eventHubs').sku].cgFunction]",
        "ADT_HOST_URL": "[if(parameters('addADT'), concat('https://', reference(resourceId('Microsoft.DigitalTwins/digitalTwinsInstances', variables('adt').name)).hostName), '')]"
      }
    },
    {
      "name": "Deploy-Webapp",
      "type": "Microsoft.Resources/deployments",
      "resourceGroup": "[resourceGroup().name]",
      "apiVersion": "[variables('deployment').apiVersion]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storage').name)]",
        "[resourceId('Microsoft.Web/serverfarms', variables('appSvc').hostingPlan)]"
      ],
      "properties": {
        "mode": "Incremental",
        "expressionEvaluationOptions": {
          "scope": "outer"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[variables('appSvc').webappName]",
              "type": "Microsoft.Web/sites",
              "apiVersion": "[variables('appSvc').apiVersion]",
              "location": "[variables('location')]",
              "dependsOn": [],
              "tags": {
                "ENV": "[variables('envTag')]"
              },
              "properties": {
                "serverFarmId": "[variables('appSvc').hostingPlan]",
                "siteConfig": {
                  "webSocketsEnabled": true
                }
              },
              "resources": [
                {
                  "name": "web",
                  "type": "sourcecontrols",
                  "apiVersion": "[variables('appSvc').apiVersion]",
                  "dependsOn": [
                    "[resourceId('Microsoft.Web/Sites', variables('appSvc').webappName)]"
                  ],
                  "properties": {
                    "repoUrl": "[variables('gitRepo').webapp]",
                    "branch": "[variables('gitRepo').webappBranch]",
                    "IsManualIntegration": true
                  }
                }
              ]
            }
          ]
        }
      }
    },
    {
      "name": "[variables('appSvc').functionsName]",
      "type": "Microsoft.Web/sites",
      "apiVersion": "[variables('appSvc').apiVersion]",
      "kind": "functionapp",
      "location": "[variables('location')]",
      "tags": {
        "ENV": "[variables('envTag')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'Deploy-Functions')]"
      ],
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "config": {}
      }
    },
    {
      "name": "[concat(variables('appSvc').webappName, '/appsettings')]",
      "type": "Microsoft.Web/sites/config",
      "apiVersion": "[variables('appSvc').apiVersion]",
      "dependsOn": [
        "[resourceId('Microsoft.SignalRService/SignalR', variables('signalR').name)]",
        "[resourceId('Microsoft.Devices/IotHubs', variables('iotHub').name)]",
        "[resourceId('Microsoft.Maps/accounts', variables('map').name)]",
        "[resourceId('Microsoft.Resources/deployments', 'Deploy-Webapp')]",
        "[resourceId('Microsoft.Resources/deployments', 'Deploy-Functions')]",
        "[resourceId('Microsoft.Web/sites', variables('appSvc').functionsName)]",
        "[resourceId('Microsoft.Web/sites/config', variables('appSvc').functionsName, 'appsettings')]"
      ],
      "properties": {
        "Azure__SignalR__ConnectionString": "[concat('Endpoint=https://', toLower(variables('signalr').name), '.service.signalr.net;AccessKey=', listKeys(resourceId('Microsoft.SignalRService/signalR', toLower(variables('signalr').name)), variables('signalr').apiVersion).primaryKey, ';Version=1.0;')]",
        "Azure__IoTHub__ConnectionString": "[concat('HostName=', reference(resourceId('Microsoft.Devices/IoTHubs', variables('iothub').name)).hostName, ';SharedAccessKeyName=iothubowner;SharedAccessKey=', listKeys(resourceId('Microsoft.Devices/IotHubs/Iothubkeys', variables('iothub').name, 'iothubowner'), variables('iothub').apiVersion).primaryKey)]",
        "Azure__AzureMap__MapKey": "[listKeys(resourceId('Microsoft.Maps/accounts', variables('map').name), variables('map').apiVersion).primaryKey]"
      }
    },
    {
      "name": "[variables('map').name]",
      "type": "Microsoft.Maps/accounts",
      "apiVersion": "[variables('map').apiVersion]",
      "location": "global",
      "sku": {
        "name": "G2",
        "tier": "Standard"
      },
      "kind": "Gen2",
      "properties": {
        "disableLocalAuth": false
      }
    },
    {
      "condition": "[parameters('addADT')]",
      "name": "[variables('adt').name]",
      "type": "Microsoft.DigitalTwins/digitalTwinsInstances",
      "apiVersion": "[variables('adt').apiVersion]",
      "location": "[variables('location')]",
      "tags": {
        "ENV": "[variables('envTag')]"
      },
      "properties": {}
    },
    {
      "condition": "[parameters('addADT')]",
      "name": "[variables('adtAuthorization').adtRoleName]",
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "[variables('adtAuthorization').apiVersion]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites/config', variables('appSvc').functionsName, 'appsettings')]"
      ],
      "properties": {
        "roleDefinitionId": "[variables('adt').roleId]",
        "principalId": "[reference(resourceId('Microsoft.Web/sites', variables('appSvc').functionsName), variables('appSvc').apiVersion, 'Full').identity.principalId]",
        "scope": "[resourceGroup().id]",
        "principalType": "ServicePrincipal"
      }
    }
  ],
  "outputs": {
    "UniqueId": {
      "type": "string",
      "value": "[parameters('UniqueID')]"
    },
    "Web_Site_Address": {
      "type": "string",
      "value": "[concat('https://',  variables('appSvc').webappName,'.azurewebsites.net/')]"
    }
  }
}